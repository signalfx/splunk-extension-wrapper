version: 2.1

commands:
  save_test_results:
    description: Collect and archive test results from `dir`.
    parameters:
      dir:
        type: string
        default: ~/testresults
    steps:
      - store_test_results:
          path: << parameters.dir >>
      - store_artifacts:
          path: << parameters.dir >>
  go_mod_download:
    description: Download go modules required by the project
    steps:
      - restore_cache:
          key: v1-go-mod-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
      - run:
          name: Install dependencies
          command: |
            [[ -d /go/pkg/mod/cache ]] && exit 0
            # retry up to 3 times in case of network issues
            for i in $(seq 1 3); do
                go mod download && exit 0
                sleep 10
            done
            exit 1
      - save_cache:
          key: v1-go-mod-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
  restore_bin:
    description: Restores the bin directory previously persisted in a workspace
    steps:
      - run: mkdir bin
      - attach_workspace:
          at: bin

orbs:
  aws-cli: circleci/aws-cli@1.4.0

jobs:
  test:
    docker:
      - image: circleci/golang:1.15.5
    steps:
      - checkout
      - go_mod_download
      - run:
          name: Run tests
          command: |
            mkdir ~/testresults
            (cd /tmp; GO111MODULE=on go get gotest.tools/gotestsum)
            CGO_ENABLED=0 gotestsum --format short-verbose --junitfile ~/testresults/unit.xml --raw-command -- go test --json -p 4 ./...
      - save_test_results
  package:
    docker:
      - image: circleci/golang:1.15.5
    steps:
      - checkout
      - go_mod_download
      - run:
          name: Package the Extension
          command: make
      - persist_to_workspace:
          root: bin
          paths:
            - ./*.zip
  publish_layer_version:
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - checkout
      - restore_bin # restores the layer artefact persisted in a workspace
      - run:
          name: List supported regions
          command: make supported-regions
      - run:
          name: Publish layer version
          command: make add-layer-version
      - store_artifacts:
          path: bin/regions
      - store_artifacts:
          path: bin/versions
      - run:
          name: Add global permission to layer version
          command: make add-layer-version-permission
  run_test:
    executor: aws-cli/default
    parameters:
      region:
        type: string
      function_name:
        type: string
    steps:
      - aws-cli/setup
      - checkout
      - restore_bin # restores the layer artefact persisted in a workspace
      - run:
          name: Add layer version
          command: |
            make add-layer-version \
              REGIONS=<< parameters.region >> LAYER_NAME=signalfx-extension-wrapper-test
      - run:
          name: Run tests
          command: make run-test REGION=<< parameters.region >> \
            FUNCTION_NAME=<< parameters.function_name >>
      - run:
          name: Delete layer version
          command: |
            make delete-layer-version \
              REGIONS=<< parameters.region >> LAYER_NAME=signalfx-extension-wrapper-test
  verify_test_results:
    parameters:
      expected_invocation_count:
        type: integer
      function_name:
        type: string
    docker:
      - image: cimg/node:15.10.0
    steps:
      - checkout
      - run:
          name: Verify test results
          command: make verify-test \
            EXPECTED_INVOCATION_COUNT=<< parameters.expected_invocation_count >> \
            FUNCTION_NAME=<< parameters.function_name >>
          no_output_timeout: 1m

workflows:
  workflow:
    jobs:
      - test
      - package
      - run_test:
          function_name: singalfx-extension-wrapper-test-function
          filters:
            branches:
              only:
                - master
                - /pipeline-.*/
          context:
            - aws-integrations-lambda-extension-user
            - eu0-integrations-ingest
          matrix:
            alias: run_test
            parameters:
              region: ["us-east-1", "eu-central-1", "af-south-1"]
          requires:
            - test
            - package
      - run_test:
          function_name: singalfx-extension-wrapper-test-fast-ingest-function
          filters:
            branches:
              only:
              - master
              - /pipeline-.*/
          context:
            - aws-integrations-lambda-extension-user
            - eu0-integrations-ingest
          matrix:
            alias: run_fast_ingest_test
            parameters:
              region: ["us-west-2", "ap-northeast-2", "eu-south-1", "ap-northeast-3"]
          requires:
            - test
            - package
      - verify_test_results:
          expected_invocation_count: 12 # 3 regions, 5 invocations in each (and we ignore last point because it might be delayed)
          function_name: singalfx-extension-wrapper-test-function
          context: eu0-integrations-ingest
          requires:
            - run_test
      - verify_test_results:
          name: verify_fast_ingest_test_results
          expected_invocation_count: 20 # 4 regions, 5 invocations in each
          function_name: singalfx-extension-wrapper-test-fast-ingest-function
          context: eu0-integrations-ingest
          requires:
            - run_fast_ingest_test
      - confirm_making_public:
          filters:
            branches:
              only: master
          type: approval
          requires:
              - verify_test_results
              - verify_fast_ingest_test_results
      - publish_layer_version:
          context: aws-rnd-lambda-extension-user
          requires:
            - confirm_making_public
